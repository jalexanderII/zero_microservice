// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package genDB

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const appendContentApartment = `-- name: AppendContentApartment :exec
UPDATE apartments
SET upload_ids = array_append(upload_ids, $2)
WHERE apartment_id = $1
`

type AppendContentApartmentParams struct {
	ApartmentID int32       `json:"apartment_id"`
	ArrayAppend interface{} `json:"array_append"`
}

func (q *Queries) AppendContentApartment(ctx context.Context, arg AppendContentApartmentParams) error {
	_, err := q.db.ExecContext(ctx, appendContentApartment, arg.ApartmentID, arg.ArrayAppend)
	return err
}

const appendContentBuilding = `-- name: AppendContentBuilding :exec
UPDATE buildings
SET upload_ids = array_append(upload_ids, $2)
WHERE building_id = $1
`

type AppendContentBuildingParams struct {
	BuildingID  int32       `json:"building_id"`
	ArrayAppend interface{} `json:"array_append"`
}

func (q *Queries) AppendContentBuilding(ctx context.Context, arg AppendContentBuildingParams) error {
	_, err := q.db.ExecContext(ctx, appendContentBuilding, arg.BuildingID, arg.ArrayAppend)
	return err
}

const createApartment = `-- name: CreateApartment :one
INSERT INTO apartments (apartment_id,
                        name,
                        full_address,
                        street,
                        city,
                        state,
                        zip_code,
                        neighborhood,
                        unit,
                        lat,
                        lng,
                        rent,
                        sqft,
                        beds,
                        baths,
                        available_on,
                        days_on_market,
                        description,
                        amenities,
                        upload_ids,
                        is_archived,
                        building_id,
                        realtor_id)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18,
        $19,
        $20,
        $21,
        $22,
        $23)
RETURNING apartment_id, name, full_address, street, city, state, zip_code, neighborhood, unit, lat, lng, rent, sqft, beds, baths, available_on, days_on_market, description, amenities, upload_ids, is_archived, building_id, realtor_id
`

type CreateApartmentParams struct {
	ApartmentID  int32          `json:"apartment_id"`
	Name         string         `json:"name"`
	FullAddress  string         `json:"full_address"`
	Street       string         `json:"street"`
	City         string         `json:"city"`
	State        string         `json:"state"`
	ZipCode      int32          `json:"zip_code"`
	Neighborhood string         `json:"neighborhood"`
	Unit         sql.NullString `json:"unit"`
	Lat          int32          `json:"lat"`
	Lng          int32          `json:"lng"`
	Rent         int32          `json:"rent"`
	Sqft         sql.NullInt32  `json:"sqft"`
	Beds         int32          `json:"beds"`
	Baths        int32          `json:"baths"`
	AvailableOn  time.Time      `json:"available_on"`
	DaysOnMarket sql.NullInt32  `json:"days_on_market"`
	Description  sql.NullString `json:"description"`
	Amenities    []string       `json:"amenities"`
	UploadIds    []string       `json:"upload_ids"`
	IsArchived   bool           `json:"is_archived"`
	BuildingID   int32          `json:"building_id"`
	RealtorID    int32          `json:"realtor_id"`
}

func (q *Queries) CreateApartment(ctx context.Context, arg CreateApartmentParams) (Apartment, error) {
	row := q.db.QueryRowContext(ctx, createApartment,
		arg.ApartmentID,
		arg.Name,
		arg.FullAddress,
		arg.Street,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Neighborhood,
		arg.Unit,
		arg.Lat,
		arg.Lng,
		arg.Rent,
		arg.Sqft,
		arg.Beds,
		arg.Baths,
		arg.AvailableOn,
		arg.DaysOnMarket,
		arg.Description,
		pq.Array(arg.Amenities),
		pq.Array(arg.UploadIds),
		arg.IsArchived,
		arg.BuildingID,
		arg.RealtorID,
	)
	var i Apartment
	err := row.Scan(
		&i.ApartmentID,
		&i.Name,
		&i.FullAddress,
		&i.Street,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Neighborhood,
		&i.Unit,
		&i.Lat,
		&i.Lng,
		&i.Rent,
		&i.Sqft,
		&i.Beds,
		&i.Baths,
		&i.AvailableOn,
		&i.DaysOnMarket,
		&i.Description,
		pq.Array(&i.Amenities),
		pq.Array(&i.UploadIds),
		&i.IsArchived,
		&i.BuildingID,
		&i.RealtorID,
	)
	return i, err
}

const createBuilding = `-- name: CreateBuilding :one
INSERT INTO buildings (building_id,
                       name,
                       full_address,
                       street,
                       city,
                       state,
                       zip_code,
                       neighborhood,
                       lat,
                       lng,
                       description,
                       amenities,
                       upload_ids,
                       realtor_id)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14)
RETURNING building_id, name, full_address, street, city, state, zip_code, neighborhood, lat, lng, description, amenities, upload_ids, realtor_id
`

type CreateBuildingParams struct {
	BuildingID   int32          `json:"building_id"`
	Name         string         `json:"name"`
	FullAddress  string         `json:"full_address"`
	Street       string         `json:"street"`
	City         string         `json:"city"`
	State        string         `json:"state"`
	ZipCode      int32          `json:"zip_code"`
	Neighborhood string         `json:"neighborhood"`
	Lat          int32          `json:"lat"`
	Lng          int32          `json:"lng"`
	Description  sql.NullString `json:"description"`
	Amenities    []string       `json:"amenities"`
	UploadIds    []string       `json:"upload_ids"`
	RealtorID    int32          `json:"realtor_id"`
}

func (q *Queries) CreateBuilding(ctx context.Context, arg CreateBuildingParams) (Building, error) {
	row := q.db.QueryRowContext(ctx, createBuilding,
		arg.BuildingID,
		arg.Name,
		arg.FullAddress,
		arg.Street,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Neighborhood,
		arg.Lat,
		arg.Lng,
		arg.Description,
		pq.Array(arg.Amenities),
		pq.Array(arg.UploadIds),
		arg.RealtorID,
	)
	var i Building
	err := row.Scan(
		&i.BuildingID,
		&i.Name,
		&i.FullAddress,
		&i.Street,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Neighborhood,
		&i.Lat,
		&i.Lng,
		&i.Description,
		pq.Array(&i.Amenities),
		pq.Array(&i.UploadIds),
		&i.RealtorID,
	)
	return i, err
}

const createRealtor = `-- name: CreateRealtor :one
INSERT INTO realtors (realtor_id,
                      name,
                      email,
                      phone_number,
                      company)
VALUES ($1,
        $2,
        $3,
        $4,
        $5)
RETURNING realtor_id, name, email, phone_number, company
`

type CreateRealtorParams struct {
	RealtorID   int32          `json:"realtor_id"`
	Name        string         `json:"name"`
	Email       sql.NullString `json:"email"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Company     sql.NullString `json:"company"`
}

func (q *Queries) CreateRealtor(ctx context.Context, arg CreateRealtorParams) (Realtor, error) {
	row := q.db.QueryRowContext(ctx, createRealtor,
		arg.RealtorID,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
		arg.Company,
	)
	var i Realtor
	err := row.Scan(
		&i.RealtorID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Company,
	)
	return i, err
}

const deleteApartment = `-- name: DeleteApartment :exec
DELETE
FROM apartments
WHERE apartment_id = $1
`

func (q *Queries) DeleteApartment(ctx context.Context, apartmentID int32) error {
	_, err := q.db.ExecContext(ctx, deleteApartment, apartmentID)
	return err
}

const deleteBuilding = `-- name: DeleteBuilding :exec
DELETE
FROM buildings
WHERE building_id = $1
`

func (q *Queries) DeleteBuilding(ctx context.Context, buildingID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBuilding, buildingID)
	return err
}

const deleteRealtor = `-- name: DeleteRealtor :exec
DELETE
FROM realtors
WHERE realtor_id = $1
`

func (q *Queries) DeleteRealtor(ctx context.Context, realtorID int32) error {
	_, err := q.db.ExecContext(ctx, deleteRealtor, realtorID)
	return err
}

const getApartment = `-- name: GetApartment :one
SELECT apartment_id, name, full_address, street, city, state, zip_code, neighborhood, unit, lat, lng, rent, sqft, beds, baths, available_on, days_on_market, description, amenities, upload_ids, is_archived, building_id, realtor_id
FROM apartments
WHERE apartment_id = $1
`

func (q *Queries) GetApartment(ctx context.Context, apartmentID int32) (Apartment, error) {
	row := q.db.QueryRowContext(ctx, getApartment, apartmentID)
	var i Apartment
	err := row.Scan(
		&i.ApartmentID,
		&i.Name,
		&i.FullAddress,
		&i.Street,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Neighborhood,
		&i.Unit,
		&i.Lat,
		&i.Lng,
		&i.Rent,
		&i.Sqft,
		&i.Beds,
		&i.Baths,
		&i.AvailableOn,
		&i.DaysOnMarket,
		&i.Description,
		pq.Array(&i.Amenities),
		pq.Array(&i.UploadIds),
		&i.IsArchived,
		&i.BuildingID,
		&i.RealtorID,
	)
	return i, err
}

const getBuilding = `-- name: GetBuilding :one
SELECT building_id, name, full_address, street, city, state, zip_code, neighborhood, lat, lng, description, amenities, upload_ids, realtor_id
FROM buildings
WHERE building_id = $1
`

func (q *Queries) GetBuilding(ctx context.Context, buildingID int32) (Building, error) {
	row := q.db.QueryRowContext(ctx, getBuilding, buildingID)
	var i Building
	err := row.Scan(
		&i.BuildingID,
		&i.Name,
		&i.FullAddress,
		&i.Street,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.Neighborhood,
		&i.Lat,
		&i.Lng,
		&i.Description,
		pq.Array(&i.Amenities),
		pq.Array(&i.UploadIds),
		&i.RealtorID,
	)
	return i, err
}

const getRealtor = `-- name: GetRealtor :one
SELECT realtor_id, name, email, phone_number, company
FROM realtors
WHERE realtor_id = $1
`

func (q *Queries) GetRealtor(ctx context.Context, realtorID int32) (Realtor, error) {
	row := q.db.QueryRowContext(ctx, getRealtor, realtorID)
	var i Realtor
	err := row.Scan(
		&i.RealtorID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Company,
	)
	return i, err
}

const listApartments = `-- name: ListApartments :many
SELECT apartment_id, name, full_address, street, city, state, zip_code, neighborhood, unit, lat, lng, rent, sqft, beds, baths, available_on, days_on_market, description, amenities, upload_ids, is_archived, building_id, realtor_id
FROM apartments
ORDER BY apartment_id
`

func (q *Queries) ListApartments(ctx context.Context) ([]Apartment, error) {
	rows, err := q.db.QueryContext(ctx, listApartments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Apartment
	for rows.Next() {
		var i Apartment
		if err := rows.Scan(
			&i.ApartmentID,
			&i.Name,
			&i.FullAddress,
			&i.Street,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.Neighborhood,
			&i.Unit,
			&i.Lat,
			&i.Lng,
			&i.Rent,
			&i.Sqft,
			&i.Beds,
			&i.Baths,
			&i.AvailableOn,
			&i.DaysOnMarket,
			&i.Description,
			pq.Array(&i.Amenities),
			pq.Array(&i.UploadIds),
			&i.IsArchived,
			&i.BuildingID,
			&i.RealtorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBuildings = `-- name: ListBuildings :many
SELECT building_id, name, full_address, street, city, state, zip_code, neighborhood, lat, lng, description, amenities, upload_ids, realtor_id
FROM buildings
ORDER BY building_id
`

func (q *Queries) ListBuildings(ctx context.Context) ([]Building, error) {
	rows, err := q.db.QueryContext(ctx, listBuildings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Building
	for rows.Next() {
		var i Building
		if err := rows.Scan(
			&i.BuildingID,
			&i.Name,
			&i.FullAddress,
			&i.Street,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.Neighborhood,
			&i.Lat,
			&i.Lng,
			&i.Description,
			pq.Array(&i.Amenities),
			pq.Array(&i.UploadIds),
			&i.RealtorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRealtors = `-- name: ListRealtors :many
SELECT realtor_id, name, email, phone_number, company
FROM realtors
ORDER BY realtor_id
`

func (q *Queries) ListRealtors(ctx context.Context) ([]Realtor, error) {
	rows, err := q.db.QueryContext(ctx, listRealtors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Realtor
	for rows.Next() {
		var i Realtor
		if err := rows.Scan(
			&i.RealtorID,
			&i.Name,
			&i.Email,
			&i.PhoneNumber,
			&i.Company,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApartment = `-- name: UpdateApartment :exec
UPDATE apartments
SET name          = $2,
    full_address  = $3,
    street= $4,
    city= $5,
    state= $6,
    zip_code= $7,
    neighborhood= $8,
    unit= $9,
    lat= $10,
    lng= $11,
    rent= $12,
    sqft= $13,
    beds= $14,
    baths= $15,
    available_on= $16,
    days_on_market= $17,
    description= $18,
    amenities= $19,
    upload_ids= $20,
    is_archived= $21,
    building_id= $22,
    realtor_id= $23
WHERE apartment_id = $1
`

type UpdateApartmentParams struct {
	ApartmentID  int32          `json:"apartment_id"`
	Name         string         `json:"name"`
	FullAddress  string         `json:"full_address"`
	Street       string         `json:"street"`
	City         string         `json:"city"`
	State        string         `json:"state"`
	ZipCode      int32          `json:"zip_code"`
	Neighborhood string         `json:"neighborhood"`
	Unit         sql.NullString `json:"unit"`
	Lat          int32          `json:"lat"`
	Lng          int32          `json:"lng"`
	Rent         int32          `json:"rent"`
	Sqft         sql.NullInt32  `json:"sqft"`
	Beds         int32          `json:"beds"`
	Baths        int32          `json:"baths"`
	AvailableOn  time.Time      `json:"available_on"`
	DaysOnMarket sql.NullInt32  `json:"days_on_market"`
	Description  sql.NullString `json:"description"`
	Amenities    []string       `json:"amenities"`
	UploadIds    []string       `json:"upload_ids"`
	IsArchived   bool           `json:"is_archived"`
	BuildingID   int32          `json:"building_id"`
	RealtorID    int32          `json:"realtor_id"`
}

func (q *Queries) UpdateApartment(ctx context.Context, arg UpdateApartmentParams) error {
	_, err := q.db.ExecContext(ctx, updateApartment,
		arg.ApartmentID,
		arg.Name,
		arg.FullAddress,
		arg.Street,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Neighborhood,
		arg.Unit,
		arg.Lat,
		arg.Lng,
		arg.Rent,
		arg.Sqft,
		arg.Beds,
		arg.Baths,
		arg.AvailableOn,
		arg.DaysOnMarket,
		arg.Description,
		pq.Array(arg.Amenities),
		pq.Array(arg.UploadIds),
		arg.IsArchived,
		arg.BuildingID,
		arg.RealtorID,
	)
	return err
}

const updateBuilding = `-- name: UpdateBuilding :exec
UPDATE buildings
SET name         = $2,
    full_address = $3,
    street= $4,
    city= $5,
    state= $6,
    zip_code= $7,
    neighborhood= $8,
    lat= $9,
    lng= $10,
    description= $11,
    amenities= $12,
    upload_ids= $13,
    realtor_id= $14
WHERE building_id = $1
`

type UpdateBuildingParams struct {
	BuildingID   int32          `json:"building_id"`
	Name         string         `json:"name"`
	FullAddress  string         `json:"full_address"`
	Street       string         `json:"street"`
	City         string         `json:"city"`
	State        string         `json:"state"`
	ZipCode      int32          `json:"zip_code"`
	Neighborhood string         `json:"neighborhood"`
	Lat          int32          `json:"lat"`
	Lng          int32          `json:"lng"`
	Description  sql.NullString `json:"description"`
	Amenities    []string       `json:"amenities"`
	UploadIds    []string       `json:"upload_ids"`
	RealtorID    int32          `json:"realtor_id"`
}

func (q *Queries) UpdateBuilding(ctx context.Context, arg UpdateBuildingParams) error {
	_, err := q.db.ExecContext(ctx, updateBuilding,
		arg.BuildingID,
		arg.Name,
		arg.FullAddress,
		arg.Street,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Neighborhood,
		arg.Lat,
		arg.Lng,
		arg.Description,
		pq.Array(arg.Amenities),
		pq.Array(arg.UploadIds),
		arg.RealtorID,
	)
	return err
}

const updateRealtor = `-- name: UpdateRealtor :exec
UPDATE realtors
SET name        = $2,
    email       = $3,
    phone_number= $4,
    company= $5
WHERE realtor_id = $1
`

type UpdateRealtorParams struct {
	RealtorID   int32          `json:"realtor_id"`
	Name        string         `json:"name"`
	Email       sql.NullString `json:"email"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Company     sql.NullString `json:"company"`
}

func (q *Queries) UpdateRealtor(ctx context.Context, arg UpdateRealtorParams) error {
	_, err := q.db.ExecContext(ctx, updateRealtor,
		arg.RealtorID,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
		arg.Company,
	)
	return err
}

const uploadContent = `-- name: UploadContent :one
INSERT INTO content (content_id,
                     filename,
                     content_type,
                     content_source,
                     source_id)
VALUES ($1,
        $2,
        $3,
        $4,
        $5)
RETURNING content_id, filename, content_type, content_source, source_id
`

type UploadContentParams struct {
	ContentID     int32          `json:"content_id"`
	Filename      sql.NullString `json:"filename"`
	ContentType   ContentType    `json:"content_type"`
	ContentSource ContentSource  `json:"content_source"`
	SourceID      int32          `json:"source_id"`
}

func (q *Queries) UploadContent(ctx context.Context, arg UploadContentParams) (Content, error) {
	row := q.db.QueryRowContext(ctx, uploadContent,
		arg.ContentID,
		arg.Filename,
		arg.ContentType,
		arg.ContentSource,
		arg.SourceID,
	)
	var i Content
	err := row.Scan(
		&i.ContentID,
		&i.Filename,
		&i.ContentType,
		&i.ContentSource,
		&i.SourceID,
	)
	return i, err
}
