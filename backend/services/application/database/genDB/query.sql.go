// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package genDB

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createApplicationRequest = `-- name: CreateApplicationRequest :one
INSERT INTO applications (name,
                          social_security,
                          date_of_birth,
                          drivers_license,
                          previous_address,
                          previous_landlord,
                          previous_landlord_number,
                          employer,
                          salary,
                          user_id,
                          apartment_id,
                          attachments)
VALUES ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12)
RETURNING application_request_id, name, social_security, date_of_birth, drivers_license, previous_address, previous_landlord, previous_landlord_number, employer, salary, created_at, user_id, apartment_id, attachments
`

type CreateApplicationRequestParams struct {
	Name                   string         `json:"name"`
	SocialSecurity         string         `json:"social_security"`
	DateOfBirth            string         `json:"date_of_birth"`
	DriversLicense         string         `json:"drivers_license"`
	PreviousAddress        sql.NullString `json:"previous_address"`
	PreviousLandlord       sql.NullString `json:"previous_landlord"`
	PreviousLandlordNumber sql.NullString `json:"previous_landlord_number"`
	Employer               sql.NullString `json:"employer"`
	Salary                 int32          `json:"salary"`
	UserID                 int32          `json:"user_id"`
	ApartmentID            int32          `json:"apartment_id"`
	Attachments            []string       `json:"attachments"`
}

func (q *Queries) CreateApplicationRequest(ctx context.Context, arg CreateApplicationRequestParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, createApplicationRequest,
		arg.Name,
		arg.SocialSecurity,
		arg.DateOfBirth,
		arg.DriversLicense,
		arg.PreviousAddress,
		arg.PreviousLandlord,
		arg.PreviousLandlordNumber,
		arg.Employer,
		arg.Salary,
		arg.UserID,
		arg.ApartmentID,
		pq.Array(arg.Attachments),
	)
	var i Application
	err := row.Scan(
		&i.ApplicationRequestID,
		&i.Name,
		&i.SocialSecurity,
		&i.DateOfBirth,
		&i.DriversLicense,
		&i.PreviousAddress,
		&i.PreviousLandlord,
		&i.PreviousLandlordNumber,
		&i.Employer,
		&i.Salary,
		&i.CreatedAt,
		&i.UserID,
		&i.ApartmentID,
		pq.Array(&i.Attachments),
	)
	return i, err
}

const createApplicationResponse = `-- name: CreateApplicationResponse :one
INSERT INTO application_response (status,
                                  application_id)
VALUES ($1,
        $2)
RETURNING application_response_id, reference_id, status, application_id
`

type CreateApplicationResponseParams struct {
	Status        ApplicationStatus `json:"status"`
	ApplicationID int32             `json:"application_id"`
}

func (q *Queries) CreateApplicationResponse(ctx context.Context, arg CreateApplicationResponseParams) (ApplicationResponse, error) {
	row := q.db.QueryRowContext(ctx, createApplicationResponse, arg.Status, arg.ApplicationID)
	var i ApplicationResponse
	err := row.Scan(
		&i.ApplicationResponseID,
		&i.ReferenceID,
		&i.Status,
		&i.ApplicationID,
	)
	return i, err
}

const deleteApplicationRequest = `-- name: DeleteApplicationRequest :exec
DELETE
FROM applications
WHERE application_request_id = $1
`

func (q *Queries) DeleteApplicationRequest(ctx context.Context, applicationRequestID int32) error {
	_, err := q.db.ExecContext(ctx, deleteApplicationRequest, applicationRequestID)
	return err
}

const deleteApplicationResponse = `-- name: DeleteApplicationResponse :exec
DELETE
FROM application_response
WHERE application_response_id = $1
`

func (q *Queries) DeleteApplicationResponse(ctx context.Context, applicationResponseID int32) error {
	_, err := q.db.ExecContext(ctx, deleteApplicationResponse, applicationResponseID)
	return err
}

const getApplicationRequest = `-- name: GetApplicationRequest :one
SELECT application_request_id, name, social_security, date_of_birth, drivers_license, previous_address, previous_landlord, previous_landlord_number, employer, salary, created_at, user_id, apartment_id, attachments
FROM applications
WHERE application_request_id = $1
`

func (q *Queries) GetApplicationRequest(ctx context.Context, applicationRequestID int32) (Application, error) {
	row := q.db.QueryRowContext(ctx, getApplicationRequest, applicationRequestID)
	var i Application
	err := row.Scan(
		&i.ApplicationRequestID,
		&i.Name,
		&i.SocialSecurity,
		&i.DateOfBirth,
		&i.DriversLicense,
		&i.PreviousAddress,
		&i.PreviousLandlord,
		&i.PreviousLandlordNumber,
		&i.Employer,
		&i.Salary,
		&i.CreatedAt,
		&i.UserID,
		&i.ApartmentID,
		pq.Array(&i.Attachments),
	)
	return i, err
}

const getApplicationResponse = `-- name: GetApplicationResponse :one
SELECT application_response_id, reference_id, status, application_id
FROM application_response
WHERE application_response_id = $1
`

func (q *Queries) GetApplicationResponse(ctx context.Context, applicationResponseID int32) (ApplicationResponse, error) {
	row := q.db.QueryRowContext(ctx, getApplicationResponse, applicationResponseID)
	var i ApplicationResponse
	err := row.Scan(
		&i.ApplicationResponseID,
		&i.ReferenceID,
		&i.Status,
		&i.ApplicationID,
	)
	return i, err
}

const listApplicationRequest = `-- name: ListApplicationRequest :many
SELECT application_request_id, name, social_security, date_of_birth, drivers_license, previous_address, previous_landlord, previous_landlord_number, employer, salary, created_at, user_id, apartment_id, attachments
FROM applications
ORDER BY application_request_id
`

func (q *Queries) ListApplicationRequest(ctx context.Context) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, listApplicationRequest)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ApplicationRequestID,
			&i.Name,
			&i.SocialSecurity,
			&i.DateOfBirth,
			&i.DriversLicense,
			&i.PreviousAddress,
			&i.PreviousLandlord,
			&i.PreviousLandlordNumber,
			&i.Employer,
			&i.Salary,
			&i.CreatedAt,
			&i.UserID,
			&i.ApartmentID,
			pq.Array(&i.Attachments),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listApplicationResponse = `-- name: ListApplicationResponse :many
SELECT application_response_id, reference_id, status, application_id
FROM application_response
ORDER BY application_response_id
`

func (q *Queries) ListApplicationResponse(ctx context.Context) ([]ApplicationResponse, error) {
	rows, err := q.db.QueryContext(ctx, listApplicationResponse)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApplicationResponse
	for rows.Next() {
		var i ApplicationResponse
		if err := rows.Scan(
			&i.ApplicationResponseID,
			&i.ReferenceID,
			&i.Status,
			&i.ApplicationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplicationRequest = `-- name: UpdateApplicationRequest :exec
UPDATE applications
SET name                    = $2,
    previous_address        =$3,
    previous_landlord=$4,
    previous_landlord_number=$5,
    employer=$6,
    salary=$7,
    attachments=$8
WHERE application_request_id = $1
`

type UpdateApplicationRequestParams struct {
	ApplicationRequestID   int32          `json:"application_request_id"`
	Name                   string         `json:"name"`
	PreviousAddress        sql.NullString `json:"previous_address"`
	PreviousLandlord       sql.NullString `json:"previous_landlord"`
	PreviousLandlordNumber sql.NullString `json:"previous_landlord_number"`
	Employer               sql.NullString `json:"employer"`
	Salary                 int32          `json:"salary"`
	Attachments            []string       `json:"attachments"`
}

func (q *Queries) UpdateApplicationRequest(ctx context.Context, arg UpdateApplicationRequestParams) error {
	_, err := q.db.ExecContext(ctx, updateApplicationRequest,
		arg.ApplicationRequestID,
		arg.Name,
		arg.PreviousAddress,
		arg.PreviousLandlord,
		arg.PreviousLandlordNumber,
		arg.Employer,
		arg.Salary,
		pq.Array(arg.Attachments),
	)
	return err
}

const updateApplicationResponse = `-- name: UpdateApplicationResponse :exec
UPDATE application_response
SET status = $2
WHERE application_response_id = $1
`

type UpdateApplicationResponseParams struct {
	ApplicationResponseID int32             `json:"application_response_id"`
	Status                ApplicationStatus `json:"status"`
}

func (q *Queries) UpdateApplicationResponse(ctx context.Context, arg UpdateApplicationResponseParams) error {
	_, err := q.db.ExecContext(ctx, updateApplicationResponse, arg.ApplicationResponseID, arg.Status)
	return err
}

const updateAttachments = `-- name: UpdateAttachments :exec
UPDATE applications
SET attachments = $2
WHERE application_request_id = $1
`

type UpdateAttachmentsParams struct {
	ApplicationRequestID int32    `json:"application_request_id"`
	Attachments          []string `json:"attachments"`
}

func (q *Queries) UpdateAttachments(ctx context.Context, arg UpdateAttachmentsParams) error {
	_, err := q.db.ExecContext(ctx, updateAttachments, arg.ApplicationRequestID, pq.Array(arg.Attachments))
	return err
}
