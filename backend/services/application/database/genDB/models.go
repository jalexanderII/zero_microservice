// Code generated by sqlc. DO NOT EDIT.

package genDB

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ApplicationStatus string

const (
	ApplicationStatusSTATUSUNKNOWN ApplicationStatus = "STATUS_UNKNOWN"
	ApplicationStatusPENDING       ApplicationStatus = "PENDING"
	ApplicationStatusAPPROVED      ApplicationStatus = "APPROVED"
	ApplicationStatusDENIED        ApplicationStatus = "DENIED"
)

func (e *ApplicationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApplicationStatus(s)
	case string:
		*e = ApplicationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ApplicationStatus: %T", src)
	}
	return nil
}

type Application struct {
	ApplicationRequestID   int32          `json:"application_request_id"`
	Name                   string         `json:"name"`
	SocialSecurity         string         `json:"social_security"`
	DateOfBirth            string         `json:"date_of_birth"`
	DriversLicense         string         `json:"drivers_license"`
	PreviousAddress        sql.NullString `json:"previous_address"`
	PreviousLandlord       sql.NullString `json:"previous_landlord"`
	PreviousLandlordNumber sql.NullString `json:"previous_landlord_number"`
	Employer               sql.NullString `json:"employer"`
	Salary                 int32          `json:"salary"`
	CreatedAt              time.Time      `json:"created_at"`
	UserID                 int32          `json:"user_id"`
	ApartmentID            int32          `json:"apartment_id"`
	Attachments            []string       `json:"attachments"`
}

type ApplicationResponse struct {
	ApplicationResponseID int32             `json:"application_response_id"`
	ReferenceID           uuid.NullUUID     `json:"reference_id"`
	Status                ApplicationStatus `json:"status"`
	ApplicationID         int32             `json:"application_id"`
}
