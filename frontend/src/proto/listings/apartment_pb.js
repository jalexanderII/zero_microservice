// source: apartment.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.object.extend(proto, google_protobuf_field_mask_pb);
var content_pb = require('./content_pb.js');
goog.object.extend(proto, content_pb);
goog.exportSymbol('proto.listings.Apartment', null, global);
goog.exportSymbol('proto.listings.Coordinates', null, global);
goog.exportSymbol('proto.listings.CreateApartmentRequest', null, global);
goog.exportSymbol('proto.listings.DeleteApartmentRequest', null, global);
goog.exportSymbol('proto.listings.DeleteApartmentResponse', null, global);
goog.exportSymbol('proto.listings.GetApartmentRequest', null, global);
goog.exportSymbol('proto.listings.GetNearbySchoolsRequest', null, global);
goog.exportSymbol('proto.listings.GetNearbySchoolsResponse', null, global);
goog.exportSymbol('proto.listings.ListApartmentRequest', null, global);
goog.exportSymbol('proto.listings.ListApartmentResponse', null, global);
goog.exportSymbol('proto.listings.PlacesResult', null, global);
goog.exportSymbol('proto.listings.UpdateApartmentRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listings.Apartment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listings.Apartment.repeatedFields_, null);
};
goog.inherits(proto.listings.Apartment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listings.Apartment.displayName = 'proto.listings.Apartment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listings.CreateApartmentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listings.CreateApartmentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listings.CreateApartmentRequest.displayName = 'proto.listings.CreateApartmentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listings.GetApartmentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listings.GetApartmentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listings.GetApartmentRequest.displayName = 'proto.listings.GetApartmentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listings.UpdateApartmentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listings.UpdateApartmentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listings.UpdateApartmentRequest.displayName = 'proto.listings.UpdateApartmentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listings.DeleteApartmentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listings.DeleteApartmentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listings.DeleteApartmentRequest.displayName = 'proto.listings.DeleteApartmentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listings.ListApartmentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listings.ListApartmentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listings.ListApartmentRequest.displayName = 'proto.listings.ListApartmentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listings.ListApartmentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listings.ListApartmentResponse.repeatedFields_, null);
};
goog.inherits(proto.listings.ListApartmentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listings.ListApartmentResponse.displayName = 'proto.listings.ListApartmentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listings.DeleteApartmentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listings.DeleteApartmentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listings.DeleteApartmentResponse.displayName = 'proto.listings.DeleteApartmentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listings.GetNearbySchoolsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listings.GetNearbySchoolsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listings.GetNearbySchoolsRequest.displayName = 'proto.listings.GetNearbySchoolsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listings.GetNearbySchoolsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listings.GetNearbySchoolsResponse.repeatedFields_, null);
};
goog.inherits(proto.listings.GetNearbySchoolsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listings.GetNearbySchoolsResponse.displayName = 'proto.listings.GetNearbySchoolsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listings.PlacesResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listings.PlacesResult.repeatedFields_, null);
};
goog.inherits(proto.listings.PlacesResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listings.PlacesResult.displayName = 'proto.listings.PlacesResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listings.Coordinates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listings.Coordinates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.listings.Coordinates.displayName = 'proto.listings.Coordinates';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listings.Apartment.repeatedFields_ = [19,20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listings.Apartment.prototype.toObject = function(opt_includeInstance) {
  return proto.listings.Apartment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listings.Apartment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.Apartment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fullAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    street: jspb.Message.getFieldWithDefault(msg, 4, ""),
    city: jspb.Message.getFieldWithDefault(msg, 5, ""),
    state: jspb.Message.getFieldWithDefault(msg, 6, ""),
    zipCode: jspb.Message.getFieldWithDefault(msg, 7, 0),
    neighborhood: jspb.Message.getFieldWithDefault(msg, 8, ""),
    unit: jspb.Message.getFieldWithDefault(msg, 9, ""),
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    lng: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    rent: jspb.Message.getFieldWithDefault(msg, 12, 0),
    sqft: jspb.Message.getFieldWithDefault(msg, 13, 0),
    beds: jspb.Message.getFieldWithDefault(msg, 14, 0),
    baths: jspb.Message.getFieldWithDefault(msg, 15, 0),
    availableOn: (f = msg.getAvailableOn()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    daysOnMarket: jspb.Message.getFieldWithDefault(msg, 17, 0),
    description: jspb.Message.getFieldWithDefault(msg, 18, ""),
    amenitiesList: (f = jspb.Message.getRepeatedField(msg, 19)) == null ? undefined : f,
    uploadIdsList: (f = jspb.Message.getRepeatedField(msg, 20)) == null ? undefined : f,
    buildingRef: jspb.Message.getFieldWithDefault(msg, 21, 0),
    realtorRef: jspb.Message.getFieldWithDefault(msg, 22, 0),
    isArchived: jspb.Message.getBooleanFieldWithDefault(msg, 23, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listings.Apartment}
 */
proto.listings.Apartment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listings.Apartment;
  return proto.listings.Apartment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listings.Apartment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listings.Apartment}
 */
proto.listings.Apartment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreet(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZipCode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setNeighborhood(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLng(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRent(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSqft(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBeds(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBaths(value);
      break;
    case 16:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setAvailableOn(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDaysOnMarket(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.addAmenities(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.addUploadIds(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBuildingRef(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRealtorRef(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsArchived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listings.Apartment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listings.Apartment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listings.Apartment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.Apartment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFullAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStreet();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getZipCode();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getNeighborhood();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getLng();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getRent();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getSqft();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getBeds();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getBaths();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getAvailableOn();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDaysOnMarket();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getAmenitiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      19,
      f
    );
  }
  f = message.getUploadIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      20,
      f
    );
  }
  f = message.getBuildingRef();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getRealtorRef();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getIsArchived();
  if (f) {
    writer.writeBool(
      23,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.listings.Apartment.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.listings.Apartment.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string full_address = 3;
 * @return {string}
 */
proto.listings.Apartment.prototype.getFullAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setFullAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string street = 4;
 * @return {string}
 */
proto.listings.Apartment.prototype.getStreet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setStreet = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string city = 5;
 * @return {string}
 */
proto.listings.Apartment.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string state = 6;
 * @return {string}
 */
proto.listings.Apartment.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 zip_code = 7;
 * @return {number}
 */
proto.listings.Apartment.prototype.getZipCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setZipCode = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string neighborhood = 8;
 * @return {string}
 */
proto.listings.Apartment.prototype.getNeighborhood = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setNeighborhood = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string unit = 9;
 * @return {string}
 */
proto.listings.Apartment.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional double lat = 10;
 * @return {number}
 */
proto.listings.Apartment.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double lng = 11;
 * @return {number}
 */
proto.listings.Apartment.prototype.getLng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setLng = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional int32 rent = 12;
 * @return {number}
 */
proto.listings.Apartment.prototype.getRent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setRent = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 sqft = 13;
 * @return {number}
 */
proto.listings.Apartment.prototype.getSqft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setSqft = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 beds = 14;
 * @return {number}
 */
proto.listings.Apartment.prototype.getBeds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setBeds = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 baths = 15;
 * @return {number}
 */
proto.listings.Apartment.prototype.getBaths = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setBaths = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional google.protobuf.Timestamp available_on = 16;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.listings.Apartment.prototype.getAvailableOn = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 16));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.listings.Apartment} returns this
*/
proto.listings.Apartment.prototype.setAvailableOn = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.clearAvailableOn = function() {
  return this.setAvailableOn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listings.Apartment.prototype.hasAvailableOn = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int32 days_on_market = 17;
 * @return {number}
 */
proto.listings.Apartment.prototype.getDaysOnMarket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setDaysOnMarket = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string description = 18;
 * @return {string}
 */
proto.listings.Apartment.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * repeated string amenities = 19;
 * @return {!Array<string>}
 */
proto.listings.Apartment.prototype.getAmenitiesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 19));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setAmenitiesList = function(value) {
  return jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.addAmenities = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.clearAmenitiesList = function() {
  return this.setAmenitiesList([]);
};


/**
 * repeated string upload_ids = 20;
 * @return {!Array<string>}
 */
proto.listings.Apartment.prototype.getUploadIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 20));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setUploadIdsList = function(value) {
  return jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.addUploadIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.clearUploadIdsList = function() {
  return this.setUploadIdsList([]);
};


/**
 * optional int32 building_ref = 21;
 * @return {number}
 */
proto.listings.Apartment.prototype.getBuildingRef = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setBuildingRef = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 realtor_ref = 22;
 * @return {number}
 */
proto.listings.Apartment.prototype.getRealtorRef = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setRealtorRef = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional bool is_archived = 23;
 * @return {boolean}
 */
proto.listings.Apartment.prototype.getIsArchived = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.listings.Apartment} returns this
 */
proto.listings.Apartment.prototype.setIsArchived = function(value) {
  return jspb.Message.setProto3BooleanField(this, 23, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listings.CreateApartmentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listings.CreateApartmentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listings.CreateApartmentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.CreateApartmentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    apartment: (f = msg.getApartment()) && proto.listings.Apartment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listings.CreateApartmentRequest}
 */
proto.listings.CreateApartmentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listings.CreateApartmentRequest;
  return proto.listings.CreateApartmentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listings.CreateApartmentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listings.CreateApartmentRequest}
 */
proto.listings.CreateApartmentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.listings.Apartment;
      reader.readMessage(value,proto.listings.Apartment.deserializeBinaryFromReader);
      msg.setApartment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listings.CreateApartmentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listings.CreateApartmentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listings.CreateApartmentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.CreateApartmentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApartment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.listings.Apartment.serializeBinaryToWriter
    );
  }
};


/**
 * optional Apartment apartment = 1;
 * @return {?proto.listings.Apartment}
 */
proto.listings.CreateApartmentRequest.prototype.getApartment = function() {
  return /** @type{?proto.listings.Apartment} */ (
    jspb.Message.getWrapperField(this, proto.listings.Apartment, 1));
};


/**
 * @param {?proto.listings.Apartment|undefined} value
 * @return {!proto.listings.CreateApartmentRequest} returns this
*/
proto.listings.CreateApartmentRequest.prototype.setApartment = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.listings.CreateApartmentRequest} returns this
 */
proto.listings.CreateApartmentRequest.prototype.clearApartment = function() {
  return this.setApartment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listings.CreateApartmentRequest.prototype.hasApartment = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listings.GetApartmentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listings.GetApartmentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listings.GetApartmentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.GetApartmentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listings.GetApartmentRequest}
 */
proto.listings.GetApartmentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listings.GetApartmentRequest;
  return proto.listings.GetApartmentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listings.GetApartmentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listings.GetApartmentRequest}
 */
proto.listings.GetApartmentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listings.GetApartmentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listings.GetApartmentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listings.GetApartmentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.GetApartmentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.listings.GetApartmentRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.listings.GetApartmentRequest} returns this
 */
proto.listings.GetApartmentRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listings.UpdateApartmentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listings.UpdateApartmentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listings.UpdateApartmentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.UpdateApartmentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    apartment: (f = msg.getApartment()) && proto.listings.Apartment.toObject(includeInstance, f),
    mask: (f = msg.getMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listings.UpdateApartmentRequest}
 */
proto.listings.UpdateApartmentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listings.UpdateApartmentRequest;
  return proto.listings.UpdateApartmentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listings.UpdateApartmentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listings.UpdateApartmentRequest}
 */
proto.listings.UpdateApartmentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.listings.Apartment;
      reader.readMessage(value,proto.listings.Apartment.deserializeBinaryFromReader);
      msg.setApartment(value);
      break;
    case 3:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listings.UpdateApartmentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listings.UpdateApartmentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listings.UpdateApartmentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.UpdateApartmentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getApartment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.listings.Apartment.serializeBinaryToWriter
    );
  }
  f = message.getMask();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.listings.UpdateApartmentRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.listings.UpdateApartmentRequest} returns this
 */
proto.listings.UpdateApartmentRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Apartment apartment = 2;
 * @return {?proto.listings.Apartment}
 */
proto.listings.UpdateApartmentRequest.prototype.getApartment = function() {
  return /** @type{?proto.listings.Apartment} */ (
    jspb.Message.getWrapperField(this, proto.listings.Apartment, 2));
};


/**
 * @param {?proto.listings.Apartment|undefined} value
 * @return {!proto.listings.UpdateApartmentRequest} returns this
*/
proto.listings.UpdateApartmentRequest.prototype.setApartment = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.listings.UpdateApartmentRequest} returns this
 */
proto.listings.UpdateApartmentRequest.prototype.clearApartment = function() {
  return this.setApartment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listings.UpdateApartmentRequest.prototype.hasApartment = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FieldMask mask = 3;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.listings.UpdateApartmentRequest.prototype.getMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 3));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.listings.UpdateApartmentRequest} returns this
*/
proto.listings.UpdateApartmentRequest.prototype.setMask = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.listings.UpdateApartmentRequest} returns this
 */
proto.listings.UpdateApartmentRequest.prototype.clearMask = function() {
  return this.setMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listings.UpdateApartmentRequest.prototype.hasMask = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listings.DeleteApartmentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listings.DeleteApartmentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listings.DeleteApartmentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.DeleteApartmentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listings.DeleteApartmentRequest}
 */
proto.listings.DeleteApartmentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listings.DeleteApartmentRequest;
  return proto.listings.DeleteApartmentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listings.DeleteApartmentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listings.DeleteApartmentRequest}
 */
proto.listings.DeleteApartmentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listings.DeleteApartmentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listings.DeleteApartmentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listings.DeleteApartmentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.DeleteApartmentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.listings.DeleteApartmentRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.listings.DeleteApartmentRequest} returns this
 */
proto.listings.DeleteApartmentRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listings.ListApartmentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listings.ListApartmentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listings.ListApartmentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.ListApartmentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listings.ListApartmentRequest}
 */
proto.listings.ListApartmentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listings.ListApartmentRequest;
  return proto.listings.ListApartmentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listings.ListApartmentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listings.ListApartmentRequest}
 */
proto.listings.ListApartmentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listings.ListApartmentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listings.ListApartmentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listings.ListApartmentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.ListApartmentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listings.ListApartmentResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listings.ListApartmentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.listings.ListApartmentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listings.ListApartmentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.ListApartmentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    apartmentsList: jspb.Message.toObjectList(msg.getApartmentsList(),
    proto.listings.Apartment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listings.ListApartmentResponse}
 */
proto.listings.ListApartmentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listings.ListApartmentResponse;
  return proto.listings.ListApartmentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listings.ListApartmentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listings.ListApartmentResponse}
 */
proto.listings.ListApartmentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.listings.Apartment;
      reader.readMessage(value,proto.listings.Apartment.deserializeBinaryFromReader);
      msg.addApartments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listings.ListApartmentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listings.ListApartmentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listings.ListApartmentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.ListApartmentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApartmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.listings.Apartment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Apartment apartments = 1;
 * @return {!Array<!proto.listings.Apartment>}
 */
proto.listings.ListApartmentResponse.prototype.getApartmentsList = function() {
  return /** @type{!Array<!proto.listings.Apartment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listings.Apartment, 1));
};


/**
 * @param {!Array<!proto.listings.Apartment>} value
 * @return {!proto.listings.ListApartmentResponse} returns this
*/
proto.listings.ListApartmentResponse.prototype.setApartmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.listings.Apartment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listings.Apartment}
 */
proto.listings.ListApartmentResponse.prototype.addApartments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.listings.Apartment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.listings.ListApartmentResponse} returns this
 */
proto.listings.ListApartmentResponse.prototype.clearApartmentsList = function() {
  return this.setApartmentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listings.DeleteApartmentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.listings.DeleteApartmentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listings.DeleteApartmentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.DeleteApartmentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    apartment: (f = msg.getApartment()) && proto.listings.Apartment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listings.DeleteApartmentResponse}
 */
proto.listings.DeleteApartmentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listings.DeleteApartmentResponse;
  return proto.listings.DeleteApartmentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listings.DeleteApartmentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listings.DeleteApartmentResponse}
 */
proto.listings.DeleteApartmentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.listings.STATUS} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.listings.Apartment;
      reader.readMessage(value,proto.listings.Apartment.deserializeBinaryFromReader);
      msg.setApartment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listings.DeleteApartmentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listings.DeleteApartmentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listings.DeleteApartmentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.DeleteApartmentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getApartment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.listings.Apartment.serializeBinaryToWriter
    );
  }
};


/**
 * optional STATUS status = 1;
 * @return {!proto.listings.STATUS}
 */
proto.listings.DeleteApartmentResponse.prototype.getStatus = function() {
  return /** @type {!proto.listings.STATUS} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.listings.STATUS} value
 * @return {!proto.listings.DeleteApartmentResponse} returns this
 */
proto.listings.DeleteApartmentResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Apartment apartment = 2;
 * @return {?proto.listings.Apartment}
 */
proto.listings.DeleteApartmentResponse.prototype.getApartment = function() {
  return /** @type{?proto.listings.Apartment} */ (
    jspb.Message.getWrapperField(this, proto.listings.Apartment, 2));
};


/**
 * @param {?proto.listings.Apartment|undefined} value
 * @return {!proto.listings.DeleteApartmentResponse} returns this
*/
proto.listings.DeleteApartmentResponse.prototype.setApartment = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.listings.DeleteApartmentResponse} returns this
 */
proto.listings.DeleteApartmentResponse.prototype.clearApartment = function() {
  return this.setApartment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listings.DeleteApartmentResponse.prototype.hasApartment = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listings.GetNearbySchoolsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listings.GetNearbySchoolsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listings.GetNearbySchoolsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.GetNearbySchoolsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    lng: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listings.GetNearbySchoolsRequest}
 */
proto.listings.GetNearbySchoolsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listings.GetNearbySchoolsRequest;
  return proto.listings.GetNearbySchoolsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listings.GetNearbySchoolsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listings.GetNearbySchoolsRequest}
 */
proto.listings.GetNearbySchoolsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLng(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listings.GetNearbySchoolsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listings.GetNearbySchoolsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listings.GetNearbySchoolsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.GetNearbySchoolsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLng();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double lat = 1;
 * @return {number}
 */
proto.listings.GetNearbySchoolsRequest.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.listings.GetNearbySchoolsRequest} returns this
 */
proto.listings.GetNearbySchoolsRequest.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double lng = 2;
 * @return {number}
 */
proto.listings.GetNearbySchoolsRequest.prototype.getLng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.listings.GetNearbySchoolsRequest} returns this
 */
proto.listings.GetNearbySchoolsRequest.prototype.setLng = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listings.GetNearbySchoolsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listings.GetNearbySchoolsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.listings.GetNearbySchoolsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listings.GetNearbySchoolsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.GetNearbySchoolsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.listings.PlacesResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listings.GetNearbySchoolsResponse}
 */
proto.listings.GetNearbySchoolsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listings.GetNearbySchoolsResponse;
  return proto.listings.GetNearbySchoolsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listings.GetNearbySchoolsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listings.GetNearbySchoolsResponse}
 */
proto.listings.GetNearbySchoolsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.listings.PlacesResult;
      reader.readMessage(value,proto.listings.PlacesResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listings.GetNearbySchoolsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listings.GetNearbySchoolsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listings.GetNearbySchoolsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.GetNearbySchoolsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.listings.PlacesResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlacesResult results = 1;
 * @return {!Array<!proto.listings.PlacesResult>}
 */
proto.listings.GetNearbySchoolsResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.listings.PlacesResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listings.PlacesResult, 1));
};


/**
 * @param {!Array<!proto.listings.PlacesResult>} value
 * @return {!proto.listings.GetNearbySchoolsResponse} returns this
*/
proto.listings.GetNearbySchoolsResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.listings.PlacesResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listings.PlacesResult}
 */
proto.listings.GetNearbySchoolsResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.listings.PlacesResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.listings.GetNearbySchoolsResponse} returns this
 */
proto.listings.GetNearbySchoolsResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listings.PlacesResult.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listings.PlacesResult.prototype.toObject = function(opt_includeInstance) {
  return proto.listings.PlacesResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listings.PlacesResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.PlacesResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    formattedAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    geometry: (f = msg.getGeometry()) && proto.listings.Coordinates.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    typesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    permanentlyClosed: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    businessStatus: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listings.PlacesResult}
 */
proto.listings.PlacesResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listings.PlacesResult;
  return proto.listings.PlacesResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listings.PlacesResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listings.PlacesResult}
 */
proto.listings.PlacesResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormattedAddress(value);
      break;
    case 2:
      var value = new proto.listings.Coordinates;
      reader.readMessage(value,proto.listings.Coordinates.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTypes(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPermanentlyClosed(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listings.PlacesResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listings.PlacesResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listings.PlacesResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.PlacesResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormattedAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.listings.Coordinates.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getPermanentlyClosed();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getBusinessStatus();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string formatted_address = 1;
 * @return {string}
 */
proto.listings.PlacesResult.prototype.getFormattedAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.listings.PlacesResult} returns this
 */
proto.listings.PlacesResult.prototype.setFormattedAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Coordinates geometry = 2;
 * @return {?proto.listings.Coordinates}
 */
proto.listings.PlacesResult.prototype.getGeometry = function() {
  return /** @type{?proto.listings.Coordinates} */ (
    jspb.Message.getWrapperField(this, proto.listings.Coordinates, 2));
};


/**
 * @param {?proto.listings.Coordinates|undefined} value
 * @return {!proto.listings.PlacesResult} returns this
*/
proto.listings.PlacesResult.prototype.setGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.listings.PlacesResult} returns this
 */
proto.listings.PlacesResult.prototype.clearGeometry = function() {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.listings.PlacesResult.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.listings.PlacesResult.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.listings.PlacesResult} returns this
 */
proto.listings.PlacesResult.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string types = 4;
 * @return {!Array<string>}
 */
proto.listings.PlacesResult.prototype.getTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.listings.PlacesResult} returns this
 */
proto.listings.PlacesResult.prototype.setTypesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.listings.PlacesResult} returns this
 */
proto.listings.PlacesResult.prototype.addTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.listings.PlacesResult} returns this
 */
proto.listings.PlacesResult.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};


/**
 * optional bool permanently_closed = 5;
 * @return {boolean}
 */
proto.listings.PlacesResult.prototype.getPermanentlyClosed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.listings.PlacesResult} returns this
 */
proto.listings.PlacesResult.prototype.setPermanentlyClosed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string business_status = 6;
 * @return {string}
 */
proto.listings.PlacesResult.prototype.getBusinessStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.listings.PlacesResult} returns this
 */
proto.listings.PlacesResult.prototype.setBusinessStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listings.Coordinates.prototype.toObject = function(opt_includeInstance) {
  return proto.listings.Coordinates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listings.Coordinates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.Coordinates.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    lng: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listings.Coordinates}
 */
proto.listings.Coordinates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listings.Coordinates;
  return proto.listings.Coordinates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listings.Coordinates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listings.Coordinates}
 */
proto.listings.Coordinates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLng(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listings.Coordinates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listings.Coordinates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listings.Coordinates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listings.Coordinates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLng();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double lat = 1;
 * @return {number}
 */
proto.listings.Coordinates.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Coordinates} returns this
 */
proto.listings.Coordinates.prototype.setLat = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double lng = 2;
 * @return {number}
 */
proto.listings.Coordinates.prototype.getLng = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.listings.Coordinates} returns this
 */
proto.listings.Coordinates.prototype.setLng = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


goog.object.extend(exports, proto.listings);
