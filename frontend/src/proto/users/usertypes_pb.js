// source: usertypes.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.auth.AdminMetadata', null, global);
goog.exportSymbol('proto.auth.Metadata', null, global);
goog.exportSymbol('proto.auth.Metadata.UserTypeCase', null, global);
goog.exportSymbol('proto.auth.OwnerMetadata', null, global);
goog.exportSymbol('proto.auth.RealtorMetadata', null, global);
goog.exportSymbol('proto.auth.RenterMetadata', null, global);
goog.exportSymbol('proto.auth.STATUS', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.auth.Metadata.oneofGroups_);
};
goog.inherits(proto.auth.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.Metadata.displayName = 'proto.auth.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.RealtorMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.RealtorMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.RealtorMetadata.displayName = 'proto.auth.RealtorMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.OwnerMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.OwnerMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.OwnerMetadata.displayName = 'proto.auth.OwnerMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.AdminMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.AdminMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.AdminMetadata.displayName = 'proto.auth.AdminMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.RenterMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.RenterMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.RenterMetadata.displayName = 'proto.auth.RenterMetadata';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.auth.Metadata.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.auth.Metadata.UserTypeCase = {
  USER_TYPE_NOT_SET: 0,
  ADMIN_METADATA: 1,
  OWNER_METADATA: 2,
  REALTOR_METADATA: 3,
  RENTER_METADATA: 4
};

/**
 * @return {proto.auth.Metadata.UserTypeCase}
 */
proto.auth.Metadata.prototype.getUserTypeCase = function() {
  return /** @type {proto.auth.Metadata.UserTypeCase} */(jspb.Message.computeOneofCase(this, proto.auth.Metadata.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    adminMetadata: (f = msg.getAdminMetadata()) && proto.auth.AdminMetadata.toObject(includeInstance, f),
    ownerMetadata: (f = msg.getOwnerMetadata()) && proto.auth.OwnerMetadata.toObject(includeInstance, f),
    realtorMetadata: (f = msg.getRealtorMetadata()) && proto.auth.RealtorMetadata.toObject(includeInstance, f),
    renterMetadata: (f = msg.getRenterMetadata()) && proto.auth.RenterMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.Metadata}
 */
proto.auth.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.Metadata;
  return proto.auth.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.Metadata}
 */
proto.auth.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.auth.AdminMetadata;
      reader.readMessage(value,proto.auth.AdminMetadata.deserializeBinaryFromReader);
      msg.setAdminMetadata(value);
      break;
    case 2:
      var value = new proto.auth.OwnerMetadata;
      reader.readMessage(value,proto.auth.OwnerMetadata.deserializeBinaryFromReader);
      msg.setOwnerMetadata(value);
      break;
    case 3:
      var value = new proto.auth.RealtorMetadata;
      reader.readMessage(value,proto.auth.RealtorMetadata.deserializeBinaryFromReader);
      msg.setRealtorMetadata(value);
      break;
    case 4:
      var value = new proto.auth.RenterMetadata;
      reader.readMessage(value,proto.auth.RenterMetadata.deserializeBinaryFromReader);
      msg.setRenterMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdminMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.auth.AdminMetadata.serializeBinaryToWriter
    );
  }
  f = message.getOwnerMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.auth.OwnerMetadata.serializeBinaryToWriter
    );
  }
  f = message.getRealtorMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.auth.RealtorMetadata.serializeBinaryToWriter
    );
  }
  f = message.getRenterMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.auth.RenterMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional AdminMetadata admin_metadata = 1;
 * @return {?proto.auth.AdminMetadata}
 */
proto.auth.Metadata.prototype.getAdminMetadata = function() {
  return /** @type{?proto.auth.AdminMetadata} */ (
    jspb.Message.getWrapperField(this, proto.auth.AdminMetadata, 1));
};


/**
 * @param {?proto.auth.AdminMetadata|undefined} value
 * @return {!proto.auth.Metadata} returns this
*/
proto.auth.Metadata.prototype.setAdminMetadata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.auth.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.Metadata} returns this
 */
proto.auth.Metadata.prototype.clearAdminMetadata = function() {
  return this.setAdminMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.Metadata.prototype.hasAdminMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OwnerMetadata owner_metadata = 2;
 * @return {?proto.auth.OwnerMetadata}
 */
proto.auth.Metadata.prototype.getOwnerMetadata = function() {
  return /** @type{?proto.auth.OwnerMetadata} */ (
    jspb.Message.getWrapperField(this, proto.auth.OwnerMetadata, 2));
};


/**
 * @param {?proto.auth.OwnerMetadata|undefined} value
 * @return {!proto.auth.Metadata} returns this
*/
proto.auth.Metadata.prototype.setOwnerMetadata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.auth.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.Metadata} returns this
 */
proto.auth.Metadata.prototype.clearOwnerMetadata = function() {
  return this.setOwnerMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.Metadata.prototype.hasOwnerMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RealtorMetadata realtor_metadata = 3;
 * @return {?proto.auth.RealtorMetadata}
 */
proto.auth.Metadata.prototype.getRealtorMetadata = function() {
  return /** @type{?proto.auth.RealtorMetadata} */ (
    jspb.Message.getWrapperField(this, proto.auth.RealtorMetadata, 3));
};


/**
 * @param {?proto.auth.RealtorMetadata|undefined} value
 * @return {!proto.auth.Metadata} returns this
*/
proto.auth.Metadata.prototype.setRealtorMetadata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.auth.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.Metadata} returns this
 */
proto.auth.Metadata.prototype.clearRealtorMetadata = function() {
  return this.setRealtorMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.Metadata.prototype.hasRealtorMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RenterMetadata renter_metadata = 4;
 * @return {?proto.auth.RenterMetadata}
 */
proto.auth.Metadata.prototype.getRenterMetadata = function() {
  return /** @type{?proto.auth.RenterMetadata} */ (
    jspb.Message.getWrapperField(this, proto.auth.RenterMetadata, 4));
};


/**
 * @param {?proto.auth.RenterMetadata|undefined} value
 * @return {!proto.auth.Metadata} returns this
*/
proto.auth.Metadata.prototype.setRenterMetadata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.auth.Metadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.Metadata} returns this
 */
proto.auth.Metadata.prototype.clearRenterMetadata = function() {
  return this.setRenterMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.Metadata.prototype.hasRenterMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.RealtorMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.RealtorMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.RealtorMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.RealtorMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 4, ""),
    company: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.RealtorMetadata}
 */
proto.auth.RealtorMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.RealtorMetadata;
  return proto.auth.RealtorMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.RealtorMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.RealtorMetadata}
 */
proto.auth.RealtorMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.RealtorMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.RealtorMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.RealtorMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.RealtorMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCompany();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.auth.RealtorMetadata.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.RealtorMetadata} returns this
 */
proto.auth.RealtorMetadata.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.auth.RealtorMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.RealtorMetadata} returns this
 */
proto.auth.RealtorMetadata.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.auth.RealtorMetadata.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.RealtorMetadata} returns this
 */
proto.auth.RealtorMetadata.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string phone_number = 4;
 * @return {string}
 */
proto.auth.RealtorMetadata.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.RealtorMetadata} returns this
 */
proto.auth.RealtorMetadata.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string company = 5;
 * @return {string}
 */
proto.auth.RealtorMetadata.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.RealtorMetadata} returns this
 */
proto.auth.RealtorMetadata.prototype.setCompany = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.OwnerMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.OwnerMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.OwnerMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.OwnerMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 4, ""),
    company: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.OwnerMetadata}
 */
proto.auth.OwnerMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.OwnerMetadata;
  return proto.auth.OwnerMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.OwnerMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.OwnerMetadata}
 */
proto.auth.OwnerMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.OwnerMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.OwnerMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.OwnerMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.OwnerMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCompany();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.auth.OwnerMetadata.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.auth.OwnerMetadata} returns this
 */
proto.auth.OwnerMetadata.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.auth.OwnerMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.OwnerMetadata} returns this
 */
proto.auth.OwnerMetadata.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.auth.OwnerMetadata.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.OwnerMetadata} returns this
 */
proto.auth.OwnerMetadata.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string phone_number = 4;
 * @return {string}
 */
proto.auth.OwnerMetadata.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.OwnerMetadata} returns this
 */
proto.auth.OwnerMetadata.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string company = 5;
 * @return {string}
 */
proto.auth.OwnerMetadata.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.auth.OwnerMetadata} returns this
 */
proto.auth.OwnerMetadata.prototype.setCompany = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.AdminMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.AdminMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.AdminMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.AdminMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.AdminMetadata}
 */
proto.auth.AdminMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.AdminMetadata;
  return proto.auth.AdminMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.AdminMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.AdminMetadata}
 */
proto.auth.AdminMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.AdminMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.AdminMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.AdminMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.AdminMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.auth.RenterMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.auth.RenterMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.auth.RenterMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.RenterMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.RenterMetadata}
 */
proto.auth.RenterMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.RenterMetadata;
  return proto.auth.RenterMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.RenterMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.RenterMetadata}
 */
proto.auth.RenterMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.RenterMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.auth.RenterMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.RenterMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.RenterMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.auth.STATUS = {
  STATUS_UNKNOWN: 0,
  PENDING: 1,
  IN_PROGRESS: 2,
  SUCCESS: 3,
  FAILED: 4
};

goog.object.extend(exports, proto.auth);
